GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu)
gcc -g pgcd (a=2, b=4) at p5final.c:12
12   min=(a<b)?a:b;
(gdb) n
13   for(int i=1;i<=min;i++)
(gdb) n
15     if(a%i==0 && b%i==0)       
(gdb) n
17       gcd=i;
(gdb) n
18       printf("%d",i);
(gdb) n
13   for(int i=1;i<=min;i++)
(gdb) n
15     if(a%i==0 && b%i==0)       
(gdb) n
17       gcd=i;
(gdb) n
18       printf("%d",i);
(gdb) n
 
 gcc -g p6original.c
gcc: error: p6original.c: No such file or directory
gcc: fatal error: no input files
compilation terminated.
 gcc -g p6final.c
 ./a.out
enter the string 
anusha
anusha reversed is ahsuna
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show c
 
 gcc -g p6final.c
 ./a.out
enter the string 
anusha
anusha reversed is ahsuna
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0x840: file p6final.c, line 23.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p6final.c:23
23  {
(gdb) n
24    printf("enter the string \n");
(gdb) n
enter the string 
26    input_string(a);
(gdb) s
input_string (a=0x7ffe816969b0 "\001") at p6final.c:4
4     scanf("%s",a);
(gdb) n
anusha
5   }
(gdb) n
main () at p6final.c:27
27    str_revers(a,r);
(gdb) s
str_revers (a=0x7ffe816969b0 "anusha", r=0x7ffe816969d0 "\260\b\240\036!V")
    at p6final.c:8
8     int x=0;
(gdb) n
9     for(int i=0;a[i]!=0;i++)
(gdb) n
11        x=x+1;
(gdb) n
9     for(int i=0;a[i]!=0;i++)
(gdb) n
11        x=x+1;
(gdb) n
9     for(int i=0;a[i]!=0;i++)
(gdb) n
11        x=x+1;
(gdb) n
9     for(int i=0;a[i]!=0;i++)
(gdb) n
11        x=x+1;
(gdb) n
9     for(int i=0;a[i]!=0;i++)
(gdb) n
11        x=x+1;
(gdb) n
9     for(int i=0;a[i]!=0;i++)
(gdb) n
11        x=x+1;
(gdb) n
9     for(int i=0;a[i]!=0;i++)
(gdb) n
13    for(int i=0;i<x+1;i++)
(gdb) n
15        r[i]=a[x-i-1];
(gdb) n
13    for(int i=0;i<x+1;i++)
(gdb) n
15        r[i]=a[x-i-1];
(gdb) n
13    for(int i=0;i<x+1;i++)
(gdb) n
15        r[i]=a[x-i-1];
(gdb) n
13    for(int i=0;i<x+1;i++)
(gdb) n
15        r[i]=a[x-i-1];
(gdb) n
13    for(int i=0;i<x+1;i++)
(gdb) n
15        r[i]=a[x-i-1];
(gdb) n
13    for(int i=0;i<x+1;i++)
(gdb) n
15        r[i]=a[x-i-1];
(gdb) n
13    for(int i=0;i<x+1;i++)
(gdb) n
15        r[i]=a[x-i-1];
(gdb) n
13    for(int i=0;i<x+1;i++)
(gdb) n
17  }
(gdb) n
main () at p6final.c:28
28    output(a,r);
(gdb) s
output (a=0x7ffe816969b0 "anusha", revers=0x7ffe816969d0 "ahsuna")
    at p6final.c:20
20    printf("%s reversed is %s\n",a,revers);
(gdb) n
anusha reversed is ahsuna
21  }
(gdb) n
main () at p6final.c:29
29    return 0;
(gdb) n
30  }(gdb) q
A debugging session is active.

    Inferior 1 [process 587] will be killed.

 
 gcc -g p7final.c
 ./a.out
enter the base and altitude of the triangle
1
2
the area of triangle with base 1.000000 altitude 2.000000 is 1.000000
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0x877: file p7final.c, line 22.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p7final.c:22
22  {
(gdb) n
24    b=input_triangle();
(gdb) s
input_triangle () at p7final.c:7
7   {
(gdb) n
9     printf("enter the base and altitude of the triangle\n");
(gdb) n
enter the base and altitude of the triangle
10    scanf("%f %f",&a.base,&a.altitude);
(gdb) n
1
2
11    return(a);
 
 gcc -g p8final.c
 ./a.out
enter the number of triangles
3
enter the base and altitude of the triangle no.1
1
2
enter the base and altitude of the triangle no.2
2
4
enter the base and altitude of the triangle no.3
4
6
the smallest of the triangles with base's and height's
1.000000,2.000000
2.000000,4.000000
4.000000,6.000000
is the triangle with base=1.000000 and height=2.000000
and has an area=1.000000
 gdb a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...done.
(gdb) b main
Breakpoint 1 at 0xad2: file p8final.c, line 60.
(gdb) r
Starting program: /home/runner/IA2-Test1-Session2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p8final.c:60
60  {
(gdb) n
62    printf("enter the number of triangles\n");
(gdb) n
enter the number of triangles
63    z=input_n();
(gdb) s
input_n () at p8final.c:7
7   {
(gdb) n
9     scanf("%d",&a);
(gdb) n
4
10    return a;
(gdb) n
11  }
(gdb) n
main () at p8final.c:64
64    Triangle t[z],min;
(gdb) n
65    input_n_triangles(z,t);
(gdb) s
input_n_triangles (n=4, t=0x7fff0f25c030) at p8final.c:24
24    for(int i=0;i<n;i++)
(gdb) n
26      printf("enter the base and altitude of the triangle no.%d\n",i+1);
(gdb) n
enter the base and altitude of the triangle no.1
27      t[i]=input_triangle();
(gdb) n
1
2
24    for(int i=0;i<n;i++)
(gdb) n
26      printf("enter the base and altitude of the triangle no.%d\n",i+1);
(gdb) n
enter the base and altitude of the triangle no.2
27      t[i]=input_triangle();
(gdb) n
2
4
24    for(int i=0;i<n;i++)
(gdb) n
26      printf("enter the base and altitude of the triangle no.%d\n",i+1);
(gdb) n
enter the base and altitude of the triangle no.3
27      t[i]=input_triangle();
(gdb) n
4
6
24    for(int i=0;i<n;i++)
(gdb) n
26      printf("enter the base and altitude of the triangle no.%d\n",i+1);
(gdb) n
enter the base and altitude of the triangle no.4
27      t[i]=input_triangle();
(gdb) n
6
8
24    for(int i=0;i<n;i++)
(gdb) n
29  }
(gdb) n
main () at p8final.c:66
66    find_areas_n(z,t);
(gdb) s
find_areas_n (n=4, t=0x7fff0f25c030) at p8final.c:32
32    for(int i=0;i<n;i++)
(gdb) n
34        find_area(&t[i]);
(gdb) n
32    for(int i=0;i<n;i++)
(gdb) n
34        find_area(&t[i]);
(gdb) n
32    for(int i=0;i<n;i++)
(gdb) n
34        find_area(&t[i]);
(gdb) n
32    for(int i=0;i<n;i++)
(gdb) n
34        find_area(&t[i]);
(gdb) n
32    for(int i=0;i<n;i++)
(gdb) n
36  }
(gdb) n
main () at p8final.c:67
67    min=find_smallest_triangle(z, t);
(gdb) n
68    output(z,t,min);
(gdb) s
output (n=4, t=0x7fff0f25c030, min=...) at p8final.c:51
51    printf("the smallest of the triangles with base's and height's\n");
(gdb) n
the smallest of the triangles with base's and height's
52    for(int i=0;i<n;i++)
(gdb) n
54        printf("%f,%f\n",t[i].base,t[i].altitude);
(gdb) n
1.000000,2.000000
52    for(int i=0;i<n;i++)
(gdb) n
54        printf("%f,%f\n",t[i].base,t[i].altitude);
(gdb) n
2.000000,4.000000
52    for(int i=0;i<n;i++)
(gdb) n
54        printf("%f,%f\n",t[i].base,t[i].altitude);
(gdb) n
4.000000,6.000000
52    for(int i=0;i<n;i++)
(gdb) n
54        printf("%f,%f\n",t[i].base,t[i].altitude);
(gdb) n
6.000000,8.000000
52    for(int i=0;i<n;i++)
(gdb) n
56    printf("is the triangle with base=%f and height=%f\n",min.base,min.altitude);
(gdb) n
is the triangle with base=1.000000 and height=2.000000
57    printf("and has an area=%f\n",min.area);
(gdb) n
and has an area=1.000000
58  }
(gdb) n
main () at p8final.c:69
69    return 0;
(gdb) n
70  }
(gdb) q
A debugging session is active.

    Inferior 1 [process 705] will be killed.

Quit anyway? (y or n) y
